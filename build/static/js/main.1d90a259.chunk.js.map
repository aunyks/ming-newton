{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Button","posed","div","pressable","init","scale","press","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoaded","operation","expression","result","error","onChange","bind","assertThisInitialized","fetchResult","event","target","value","name","setState","defineProperty","console","log","_this2","encodedExpr","encodeURI","url","concat","fetch","then","res","json","_ref","catch","_this$state","react_default","a","createElement","className","type","placeholder","color","size","outlined","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d90a259.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport posed from 'react-pose';\nimport './App.css';\n\nconst Button = posed.div({\n  pressable: true,\n  init: { scale: 1 },\n  press: { scale: 0.8 }\n});\n\n// Next steps:\n// User validation & error messages\n// Add description for each operation\n// Separate library for fetchResults function (\"newton.js\" to import later)\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      //to track when results from API have loaded\n      isLoaded: false,\n      operation: \"\",\n      expression: \"\",\n      result: \"\",\n      error: {}\n    }\n    this.onChange = this.onChange.bind(this);\n    this.fetchResult = this.fetchResult.bind(this);\n  }\n\n  onChange(event) {\n    let change = {}\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n    console.log(this.state);\n  }\n\n    //Separate into another library to import later\n  //Function takes operation + expression (given by user):\n  // 1) URL encode expression\n  // 2) build URL\n  fetchResult() {\n    const encodedExpr = encodeURI(this.state.expression); //take user input & encode expression into URL format\n    const url = `https://newton.now.sh/${this.state.operation}/${encodedExpr}`\n    fetch(url) \n      .then(res => res.json())    //turn results to JSON obj\n      .then(({ operation, expression, result }) => {     //We use arrow function to unbind 'this', so 'this' refers to the instance of UserInput object as defined above \n        this.setState({\n          isLoaded: true,\n          operation, expression, result\n        })\n      })\n      .catch((error) => this.setState({ error }))\n  }\n\n  render() {\n    const { operation, expression, result, error } = this.state;\n    console.log(error);\n    return (\n      <div>\n        <div className=\"container is-fluid is-centered\">\n          <h1 className=\"title is-1\"> Ming Newton </h1>\n          Calculator for all of your advanced math needs.\n        </div>\n        {/* Begin user input/form */}\n        <div className=\"columns\">\n          <div className=\"column is-mobile\">\n            {/* Select operator, onChange updates state */}\n            <select onChange={this.onChange} className=\"select\" name=\"operation\">\n              <option>Choose operator</option>\n              <option value=\"simplify\">Simplify</option>\n              <option value=\"factor\">Factor</option>\n              <option value=\"derive\">Derive</option>\n              <option value=\"integrate\">Integrate</option>\n              <option value=\"zeroes\">Find 0's</option>\n              <option value=\"tangent\">Find Tangent</option>\n              <option value=\"area\">Area Under Curve</option>\n              <option value=\"cos\">Cosine</option>\n              <option value=\"sin\">Sine</option>\n              <option value=\"tan\">Tangent</option>\n              <option value=\"arccos\">Inverse Cosine</option>\n              <option value=\"arcsin\">Inverse Sine</option>\n              <option value=\"arctan\">Inverse Tangent</option>\n              <option value=\"abs\">Absolute Value</option>\n              <option value=\"log\">Logarithm</option>\n            </select>\n          </div>\n          <div className=\"column is-mobile\">\n            {/* Input expression: user types expression, onChange updates state */}\n            <input onChange={this.onChange} className=\"input is-info is-fullwidth\" name=\"expression\" type=\"text\" placeholder=\"Enter what you want to calculate\"\n            />\n          </div>\n          <div className=\"column is-mobile\">\n            <Button className=\"box button is-rounded\" type=\"submit\" color=\"success\" size=\"small\" outlined onClick={this.fetchResult}> Wowza! </Button>\n          </div>\n          \n        </div>\n        <div className=\"results\"> \n          {/* results div  */}\n          {/* make display results conditional as long as no error */}\n          {operation} {' '}\n          {expression} =\n          {result}\n          {/* give user more specific info about error */}\n          {/* {error ? error : \"\"}  */}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}